package com.scrat.everchanging;

import android.content.Context;

import com.scrat.everchanging.util.ReusableIterator;

import java.util.ArrayList;

final class Fairy extends TextureObject {

    interface CreatorCallback {
        void callingCreatorCallback(float[] transform, float[] translate, int xscale, int index);
    }

    private static final int[][] textureList = {{R.drawable.image_15}};

    private final ArrayList<Creator> creatorObjects = new ArrayList<>();
    private final ArrayList<Creator> removeCreatorObjects = new ArrayList<>();

    private final int[][] periodAnim = {
            {60, 115},
            {25, 130},
            {155, 200},
            {20, 65}
    };

    /**
     * I don't know if I need to increase the number of frames for this animation.
     * This animation appears for several frames in front of the fairies. Like a "star trail".
     * 4 scene options (index). There are 5 frames in each scene. There are 6 objects in each frame.
     */
    // @formatter:off
    private final float[][][][] matrixTransform = {
            {       //Index 1
                    {   //Frame 1
                            {0.25f, 0.25f, 0.0000f, 0.0000f, -47.25f, 18.4f},
                            {0.25f, 0.25f, 0.0000f, 0.0000f, -48.9f, 17.15f},
                            {0.25f, 0.25f, 0.0000f, 0.0000f, -44.75f, 16.65f},
                            {0.25f, 0.25f, 0.0000f, 0.0000f, -46.8f, 17.4f},
                            {0.25f, 0.25f, 0.0000f, 0.0000f, -46.35f, 15.8f},
                            {0.25f, 0.25f, 0.0000f, 0.0000f, -48.9f, 15.3f},
                            {0.25f, 0.25f, 0.0000f, 0.0000f, -47.25f, 15.55f}
                    }, {//Frame 2
                            {0.3889f, 0.3889f, 0.0000f, 0.0000f, -28.2f, 14.7f},
                            {0.3889f, 0.3889f, 0.0000f, 0.0000f, -19.9f, 17.85f},
                            {0.3889f, 0.3889f, 0.0000f, 0.0000f, -9.85f, 15.45f},
                            {0.3889f, 0.3889f, 0.0000f, 0.0000f, -12.9f, 17f},
                            {0.3889f, 0.3889f, 0.0000f, 0.0000f, -15.6f, 12.8f},
                            {0.3889f, 0.3889f, 0.0000f, 0.0000f, -18.55f, 18.6f},
                            {0.3889f, 0.3889f, 0.0000f, 0.0000f, -25f, 14.8f}
                    }, {//Frame 3
                            {0.4722f, 0.4722f, 0.0000f, 0.0000f, -13.4f, 13.1f},
                            {0.4722f, 0.4722f, 0.0000f, 0.0000f, -8.8f, 19.55f},
                            {0.4722f, 0.4722f, 0.0000f, 0.0000f, 7.6f, 14.75f},
                            {0.4722f, 0.4722f, 0.0000f, 0.0000f, 4f, 17.05f},
                            {0.4722f, 0.4722f, 0.0000f, 0.0000f, -3.2f, 10f},
                            {0.4722f, 0.4722f, 0.0000f, 0.0000f, -5.45f, 24.85f},
                            {0.4722f, 0.4722f, 0.0000f, 0.0000f, -24.4f, 15.3f}
                    }, {//Frame 4
                            {0.5f, 0.5f, 0.0000f, 0.0000f, -11.4f, 12f},
                            {0.5f, 0.5f, 0.0000f, 0.0000f, -5.35f, 20.2f},
                            {0.5f, 0.5f, 0.0000f, 0.0000f, 13.3f, 14.5f},
                            {0.5f, 0.5f, 0.0000f, 0.0000f, 5.8f, 17.35f},
                            {0.5f, 0.5f, 0.0000f, 0.0000f, 0.7f, 9f},
                            {0.5f, 0.5f, 0.0000f, 0.0000f, -1.35f, 27.15f},
                            {0.5f, 0.5f, 0.0000f, 0.0000f, -38.85f, 16.5f}
                    },{//Frame 5
                            {0.5f, 0.5f, 0.0000f, 0.0000f, -11.4f, 12f},
                            {0.5f, 0.5f, 0.0000f, 0.0000f, -5.35f, 20.2f},
                            {0.5f, 0.5f, 0.0000f, 0.0000f, 13.3f, 14.5f},
                            {0.5f, 0.5f, 0.0000f, 0.0000f, 5.8f, 17.35f},
                            {0.5f, 0.5f, 0.0000f, 0.0000f, 0.7f, 9f},
                            {0.5f, 0.5f, 0.0000f, 0.0000f, -1.35f, 27.15f},
                            {0.5f, 0.5f, 0.0000f, 0.0000f, -38.85f, 16.5f}
                    }
            },{     //index 2
                    {
                            {-0.09846f, 0.09848f, -0.2295f, -0.2295f, 47.4f, 1.5f},
                            {-0.09846f, 0.09848f, -0.2295f, -0.2295f, 49.2f, 2.55f},
                            {-0.09846f, 0.09848f, -0.2295f, -0.2295f, 48.05f, -1.5f},
                            {-0.09846f, 0.09848f, -0.2295f, -0.2295f, 48.15f, 0.7f},
                            {-0.09846f, 0.09848f, -0.2295f, -0.2295f, 49.5f, -0.35f},
                            {-0.09846f, 0.09848f, -0.2295f, -0.2295f, 50.95f, 1.8f},
                            {-0.09846f, 0.09848f, -0.2295f, -0.2295f, 50.05f, 0.35f}
                    }, {
                            {-0.1532f, 0.1532f, -0.357f, -0.357f, 43.35f, -17.45f},
                            {-0.1532f, 0.1532f, -0.357f, -0.357f, 37.2f, -23.85f},
                            {-0.1532f, 0.1532f, -0.357f, -0.357f, 35.4f, -33.95f},
                            {-0.1532f, 0.1532f, -0.357f, -0.357f, 35.25f, -30.55f},
                            {-0.1532f, 0.1532f, -0.357f, -0.357f, 40.1f, -29.75f},
                            {-0.1532f, 0.1532f, -0.357f, -0.357f, 35.95f, -24.85f},
                            {-0.1532f, 0.1532f, -0.357f, -0.357f, 41.95f, -20.35f}
                    }, {
                            {-0.186f, 0.186f, -0.4335f, -0.4335f, 39f, -31.7f},
                            {-0.186f, 0.186f, -0.4335f, -0.4335f, 31.25f, -33.4f},
                            {-0.186f, 0.186f, -0.4335f, -0.4335f, 29.2f, -50.25f},
                            {-0.186f, 0.186f, -0.4335f, -0.4335f, 28.55f, -46.05f},
                            {-0.186f, 0.186f, -0.4335f, -0.4335f, 37.85f, -42.3f},
                            {-0.186f, 0.186f, -0.4335f, -0.4335f, 25.1f, -34.35f},
                            {-0.186f, 0.186f, -0.4335f, -0.4335f, 41.3f, -20.7f}
                    },{
                            {-0.1969f, 0.1969f, -0.459f, -0.459f, 39.2f, -33.95f},
                            {-0.1969f, 0.1969f, -0.459f, -0.459f, 29.3f, -36.3f},
                            {-0.1969f, 0.1969f, -0.459f, -0.459f, 27.15f, -55.6f},
                            {-0.1969f, 0.1969f, -0.459f, -0.459f, 27.5f, -47.6f},
                            {-0.1969f, 0.1969f, -0.459f, -0.459f, 37.2f, -46.2f},
                            {-0.1969f, 0.1969f, -0.459f, -0.459f, 21.35f, -37.25f},
                            {-0.1969f, 0.1969f, -0.459f, -0.459f, 45.9f, -6.95f}
                    }, {
                            {-0.1969f, 0.1969f, -0.459f, -0.459f, 39.2f, -33.95f},
                            {-0.1969f, 0.1969f, -0.459f, -0.459f, 29.3f, -36.3f},
                            {-0.1969f, 0.1969f, -0.459f, -0.459f, 27.15f, -55.6f},
                            {-0.1969f, 0.1969f, -0.459f, -0.459f, 27.5f, -47.6f},
                            {-0.1969f, 0.1969f, -0.459f, -0.459f, 37.2f, -46.2f},
                            {-0.1969f, 0.1969f, -0.459f, -0.459f, 21.35f, -37.25f},
                            {-0.1969f, 0.1969f, -0.459f, -0.459f, 45.9f, -6.95f}
                    }
            },{
                    {
                            {-0.1545f, -0.1545f, 0.1962f, -0.1962f, -49.7f, -88.25f},
                            {-0.1545f, -0.1545f, 0.1962f, -0.1962f, -47.65f, -88.8f},
                            {-0.1545f, -0.1545f, 0.1962f, -0.1962f, -49.85f, -85.2f},
                            {-0.1545f, -0.1545f, 0.1962f, -0.1962f, -49.2f, -87.3f},
                            {-0.1545f, -0.1545f, 0.1962f, -0.1962f, -48.2f, -85.95f},
                            {-0.1545f, -0.1545f, 0.1962f, -0.1962f, -46.2f, -87.6f},
                            {-0.1545f, -0.1545f, 0.1962f, -0.1962f, -47.45f, -86.5f}
                    }, {
                            {-0.2403f, -0.2403f, 0.3052f, -0.3052f, -58.55f, -71.05f},
                            {-0.2403f, -0.2403f, 0.3052f, -0.3052f, -66.25f, -66.45f},
                            {-0.2403f, -0.2403f, 0.3052f, -0.3052f, -70.5f, -57.1f},
                            {-0.2403f, -0.2403f, 0.3052f, -0.3052f, -69.8f, -60.5f},
                            {-0.2403f, -0.2403f, 0.3052f, -0.3052f, -64.9f, -59.95f},
                            {-0.2403f, -0.2403f, 0.3052f, -0.3052f, -67.6f, -65.85f},
                            {-0.2403f, -0.2403f, 0.3052f, -0.3052f, -60.65f, -68.55f}
                    }, {
                            {-0.2919f, -0.2919f, 0.3706f, -0.3706f, -66.5f, -58.4f},
                            {-0.2919f, -0.2919f, 0.3706f, -0.3706f, -74.35f, -58.8f},
                            {-0.2919f, -0.2919f, 0.3706f, -0.3706f, -80.7f, -43f},
                            {-0.2919f, -0.2919f, 0.3706f, -0.3706f, -80.25f, -47.15f},
                            {-0.2919f, -0.2919f, 0.3706f, -0.3706f, -70.3f, -48.5f},
                            {-0.2919f, -0.2919f, 0.3706f, -0.3706f, -80.55f, -59.5f},
                            {-0.2919f, -0.2919f, 0.3706f, -0.3706f, -61.35f, -68.4f},
                    }, {
                            {-0.309f, -0.309f, 0.3923f, -0.3924f, -66.75f, -56.15f},
                            {-0.309f, -0.309f, 0.3923f, -0.3924f, -76.95f, -56.45f},
                            {-0.309f, -0.309f, 0.3923f, -0.3924f, -84f, -38.35f},
                            {-0.309f, -0.309f, 0.3923f, -0.3924f, -81.6f, -45.95f},
                            {-0.309f, -0.309f, 0.3923f, -0.3924f, -71.95f, -44.75f},
                            {-0.309f, -0.309f, 0.3923f, -0.3924f, -84.85f, -57.6f},
                            {-0.309f, -0.309f, 0.3923f, -0.3924f, -53.35f, -80.45f}
                    }, {
                            {-0.309f, -0.309f, 0.3923f, -0.3924f, -66.75f, -56.15f},
                            {-0.309f, -0.309f, 0.3923f, -0.3924f, -76.95f, -56.45f},
                            {-0.309f, -0.309f, 0.3923f, -0.3924f, -84f, -38.35f},
                            {-0.309f, -0.309f, 0.3923f, -0.3924f, -81.6f, -45.95f},
                            {-0.309f, -0.309f, 0.3923f, -0.3924f, -71.95f, -44.75f},
                            {-0.309f, -0.309f, 0.3923f, -0.3924f, -84.85f, -57.6f},
                            {-0.309f, -0.309f, 0.3923f, -0.3924f, -53.35f, -80.45f}
                    }
            },{
                    {
                            {-0.00528f, -0.00528f, 0.2496f, -0.2496f, -75.2f, -35.45f},
                            {-0.00528f, -0.00528f, 0.2496f, -0.2496f, -73.9f, -37.1f},
                            {-0.00528f, -0.00528f, 0.2496f, -0.2496f, -73.5f, -32.9f},
                            {-0.00528f, -0.00528f, 0.2496f, -0.2496f, -74.2f, -35f},
                            {-0.00528f, -0.00528f, 0.2496f, -0.2496f, -72.65f, -34.5f},
                            {-0.00528f, -0.00528f, 0.2496f, -0.2496f, -72.05f, -37.05f},
                            {-0.00528f, -0.00528f, 0.2496f, -0.2496f, -72.35f, -35.4f}
                    }, {
                            {-0.008224f, -0.008224f, 0.3882f, -0.3882f, -71.9f, -16.45f},
                            {-0.008224f, -0.008224f, 0.3882f, -0.3882f, -75.2f, -8.2f},
                            {-0.008224f, -0.008224f, 0.3882f, -0.3882f, -73f, 1.85f},
                            {-0.008224f, -0.008224f, 0.3882f, -0.3882f, -74.5f, -1.25f},
                            {-0.008224f, -0.008224f, 0.3882f, -0.3882f, -70.25f, -3.75f},
                            {-0.008224f, -0.008224f, 0.3882f, -0.3882f, -75.9f, -6.8f},
                            {-0.008224f, -0.008224f, 0.3882f, -0.3882f, -72.05f, -13.2f}
                    }, {
                            {-0.009979f, -0.009979f, 0.4714f, -0.4714f, -70.7f, -1.6f},
                            {-0.009979f, -0.009979f, 0.4714f, -0.4714f, -77.2f, 2.85f},
                            {-0.009979f, -0.009979f, 0.4714f, -0.4714f, -72.75f, 19.25f},
                            {-0.009979f, -0.009979f, 0.4714f, -0.4714f, -74.95f, 15.65f},
                            {-0.009979f, -0.009979f, 0.4714f, -0.4714f, -67.8f, 8.6f},
                            {-0.009979f, -0.009979f, 0.4714f, -0.4714f, -82.6f, 6.05f},
                            {-0.009979f, -0.009979f, 0.4714f, -0.4714f, -72.65f, -12.65f}
                    }, {
                            {-0.01057f, -0.01057f, 0.4991f, -0.4991f, -69.55f, 0.45f},
                            {-0.01057f, -0.01057f, 0.4991f, -0.4991f, -77.85f, 6.3f},
                            {-0.01057f, -0.01057f, 0.4991f, -0.4991f, -72.55f, 25f},
                            {-0.01057f, -0.01057f, 0.4991f, -0.4991f, -75.25f, 17.5f},
                            {-0.01057f, -0.01057f, 0.4991f, -0.4991f, -66.8f, 12.55f},
                            {-0.01057f, -0.01057f, 0.4991f, -0.4991f, -84.8f, 10.15f},
                            {-0.01057f, -0.01057f, 0.4991f, -0.4991f, -73.45f, -27.05f}
                    }, {
                            {-0.01057f, -0.01057f, 0.4991f, -0.4991f, -69.55f, 0.45f},
                            {-0.01057f, -0.01057f, 0.4991f, -0.4991f, -77.85f, 6.3f},
                            {-0.01057f, -0.01057f, 0.4991f, -0.4991f, -72.55f, 25f},
                            {-0.01057f, -0.01057f, 0.4991f, -0.4991f, -75.25f, 17.5f},
                            {-0.01057f, -0.01057f, 0.4991f, -0.4991f, -66.8f, 12.55f},
                            {-0.01057f, -0.01057f, 0.4991f, -0.4991f, -84.8f, 10.15f},
                            {-0.01057f, -0.01057f, 0.4991f, -0.4991f, -73.45f, -27.05f}
                    }
            }
    };

    private final float[][][][][] ColorTransform = {
                    {       //Index 1
                            {   //Frame 1
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}}
                            }, {//Frame 2
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}}
                            }, {//Frame 3
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}}
                            }, {//Frame 4
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}}
                            },{
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}}
                            }
                    },{     //index 2
                            {
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}}
                            }, {
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}}
                            }, {
                                    {{256, 256, 256, 171}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}}
                            },{
                                    {{256, 256, 256, 85}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}}
                            }, {
                                    {{256, 256, 256, 85}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}}
                            }
                    },{
                            {
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}}
                            }, {
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}}
                            }, {
                                    {{256, 256, 256, 171}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}}
                            }, {
                                    {{256, 256, 256, 85}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}}
                            }, {
                                    {{256, 256, 256, 85}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}}
                            }
                    },{
                            {
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}}
                            }, {
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}}
                            }, {
                                    {{256, 256, 256, 171}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}}
                            }, {
                                    {{256, 256, 256, 85}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}}
                            }, {
                                    {{256, 256, 256, 85}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 128}, {0, 0, 0, 0}},
                                    {{256, 256, 256, 256}, {0, 0, 0, 0}}
                            }
                    }
            };
    // @formatter:on

    private static final int MAX_FRAMES = 20;

    private boolean init;
    private int frameCounter;
    private int numClips = minObjects;

    private CreatorCallback creatorCallback;

    public void registerCallBack(final CreatorCallback callback) {
        this.creatorCallback = callback;
    }

    Fairy(Context context) {
        super(context, textureList, null);
    }

    private void addCreator() {
        if (creatorObjects.size() >= numClips) return;
        if (random.nextInt(5) > 0) return;

        final Creator creator = new Creator();
        creator.animIndex = random.nextInt(4);
        creator.frame = periodAnim[creator.animIndex][0];
        creator.maxFrame = periodAnim[creator.animIndex][1];
        creatorObjects.add(creator);
    }

    private void createObject(final int index) {
        final TextureManager.Texture texture = textureManager.getTexture(textureManager.getTextureIndex(textureList[0][0]));
        texture.width = 20.0f;
        texture.height = 21.0f;

        final int _x = random.nextInt(120) + 70;
        final int _y = random.nextInt(160) + 70;
        for (int i = 0; i < 7; i++) {
            final Object object = objects.obtain(texture, 1.0f);
            object.resetMatrix();
            object.resetViewMatrix();
            object.setViewTranslate(_x, height - _y);
            object.index = index;
            object.frameCounter = 0;
            object.animCounter = i;
            object.animCounterSkip = false;
        }
    }

    private void updateCreator() {
        final int objectsSize = creatorObjects.size();
        for (int i = 0; i < objectsSize; i++) {
            final Creator creator = creatorObjects.get(i);
            if (creator.frame == 0) createObject(creator.animIndex);
            if (creator.maxFrame == 0) removeCreatorObjects.add(creator);
            creator.frame--;
            creator.maxFrame--;
        }

        final int removeCreatorObjectsSize = removeCreatorObjects.size();
        for (int i = 0; i < removeCreatorObjectsSize; i++) {
            creatorObjects.remove(removeCreatorObjects.get(i));
        }
        removeCreatorObjects.clear();
    }

    public void update(boolean createObject) {
        frameCounter = (frameCounter + 1) % MAX_FRAMES;
        if (!init && createObject) numClips = minObjects + random.nextInt(maxObjects - 4);
        init = createObject;
        if (createObject && (frameCounter == 2)) addCreator();

        updateCreator();

        final ReusableIterator<Object> iterator = objects.iterator();
        iterator.acquire();

        while (iterator.hasNext()) {
            final Object object = iterator.next();
            if (object.frameCounter < matrixTransform[object.index].length) {
                if (!object.animCounterSkip) {
                    object.resetMatrix();
                    object.setTransform(matrixTransform[object.index][object.frameCounter][object.animCounter]);
                    object.setColorTransform(ColorTransform[object.index][object.frameCounter][object.animCounter]);
                    if (object.animCounter == 6) {
                        if ((object.index == 0 && object.frameCounter == 4) ||
                                (object.index == 1 && object.frameCounter == 1) ||
                                (object.index == 2 && object.frameCounter == 0) ||
                                (object.index == 3 && object.frameCounter == 1)) {
                            creatorCallback.callingCreatorCallback(object.viewTransformMatrix, object.ViewTranslate, random.nextInt(2), object.index);
                        }
                    }

                    // Naming is confusing, reused variable. animCounterSkip actually skips
                    // frameCounter, not animCounter.

                    // If new frames will be added to compensate for frame rate increase from 20 to 40,
                    // this needs to be removed.

                    object.frameCounter++;
                }
                object.animCounterSkip = !object.animCounterSkip;
            } else iterator.remove();
        }

        iterator.release();
    }

    private static class Creator {
        public int animIndex, frame, maxFrame;
    }
}
